/**
 * Do not edit this file.  Any changes will be overwritten by the gamedata
 * updater or by upgrading your AMX Mod X install.
 *
 * To override data in this file, create a subdirectory named "custom" and
 * place your own gamedata file(s) inside of it.  Such files will be parsed
 * after AMXX's own.
 *
 * For more information, see http://wiki.alliedmods.net/Gamedata_Updating_(AMX_Mod_X)
 */

"Games"
{
	"#default"
	{
		"Classes"
		{
			"CHostageImprov"
			{
				"Offsets"
				{
					"m_coughTimer"  // CountdownTimer
					{
						"windows"   "4"
						"linux"     "4"
						"mac"       "4"
					}

					"m_grenadeTimer"  // CountdownTimer
					{
						"windows"   "12"
						"linux"     "12"
						"mac"       "12"
					}

					"m_hostage"  // CHostage*
					{
						"windows"   "20"
						"linux"     "20"
						"mac"       "20"
					}

					"m_lastKnownArea"  // CNavArea*
					{
						"windows"   "24"
						"linux"     "24"
						"mac"       "24"
					}

					"m_centroid"  // Vector
					{
						"windows"   "28"
						"linux"     "28"
						"mac"       "28"
					}

					"m_eye"  // Vector
					{
						"windows"   "40"
						"linux"     "40"
						"mac"       "40"
					}

					"m_behavior"  // HostageStateMachine
					{
						"windows"   "52"
						"linux"     "52"
						"mac"       "52"
					}

					"m_idleState"  // HostageIdleState
					{
						"windows"   "68"
						"linux"     "68"
						"mac"       "68"
					}

					"m_escapeState"  // HostageEscapeState
					{
						"windows"   "140"
						"linux"     "140"
						"mac"       "140"
					}

					"m_retreatState"  // HostageRetreatState
					{
						"windows"   "240"
						"linux"     "240"
						"mac"       "240"
					}

					"m_followState"  // HostageFollowState
					{
						"windows"   "252"
						"linux"     "252"
						"mac"       "252"
					}

					"m_animateState"  // HostageAnimateState
					{
						"windows"   "328"
						"linux"     "328"
						"mac"       "328"
					}

					"m_didFidget"  // bool
					{
						"windows"   "460"
						"linux"     "460"
						"mac"       "460"
					}

					"m_aggression"  // float
					{
						"windows"   "464"
						"linux"     "464"
						"mac"       "464"
					}

					"m_lastSawCT"  // IntervalTimer
					{
						"windows"   "468"
						"linux"     "468"
						"mac"       "468"
					}

					"m_lastSawT"  // IntervalTimer
					{
						"windows"   "472"
						"linux"     "472"
						"mac"       "472"
					}

					"m_checkNearbyTerroristTimer"  // CountdownTimer
					{
						"windows"   "476"
						"linux"     "476"
						"mac"       "476"
					}

					"m_isTerroristNearby"  // bool
					{
						"windows"   "484"
						"linux"     "484"
						"mac"       "484"
					}

					"m_nearbyTerroristTimer"  // CountdownTimer
					{
						"windows"   "488"
						"linux"     "488"
						"mac"       "488"
					}

					"m_scaredTimer"  // CountdownTimer
					{
						"windows"   "496"
						"linux"     "496"
						"mac"       "496"
					}

					"m_scareIntensity"  // enum ScareType
					{
						"windows"   "504"
						"linux"     "504"
						"mac"       "504"
					}

					"m_ignoreTerroristTimer"  // CountdownTimer
					{
						"windows"   "508"
						"linux"     "508"
						"mac"       "508"
					}

					"m_blinkTimer"  // CountdownTimer
					{
						"windows"   "516"
						"linux"     "516"
						"mac"       "516"
					}

					"m_blinkCounter"  // char
					{
						"windows"   "524"
						"linux"     "524"
						"mac"       "524"
					}

					"m_lastInjuryTimer"  // IntervalTimer
					{
						"windows"   "528"
						"linux"     "528"
						"mac"       "528"
					}

					"m_lastNoiseTimer"  // IntervalTimer
					{
						"windows"   "532"
						"linux"     "532"
						"mac"       "532"
					}

					"m_avoidFriendTimer"  // CountdownTimer
					{
						"windows"   "536"
						"linux"     "536"
						"mac"       "536"
					}

					"m_isFriendInTheWay"  // bool
					{
						"windows"   "544"
						"linux"     "544"
						"mac"       "544"
					}

					"m_chatterTimer"  // CountdownTimer
					{
						"windows"   "548"
						"linux"     "548"
						"mac"       "548"
					}

					"m_isDelayedChatterPending"  // bool
					{
						"windows"   "556"
						"linux"     "556"
						"mac"       "556"
					}

					"m_delayedChatterTimer"  // CountdownTimer
					{
						"windows"   "560"
						"linux"     "560"
						"mac"       "560"
					}

					"m_delayedChatterType"  // enum HostageChatterType
					{
						"windows"   "568"
						"linux"     "568"
						"mac"       "568"
					}

					"m_delayedChatterMustSpeak"  // bool
					{
						"windows"   "572"
						"linux"     "572"
						"mac"       "572"
					}

					"m_talkingTimer"  // CountdownTimer
					{
						"windows"   "576"
						"linux"     "576"
						"mac"       "576"
					}

					"m_moveFlags"  // unsigned int
					{
						"windows"   "584"
						"linux"     "584"
						"mac"       "584"
					}

					"m_vel"  // Vector2D
					{
						"windows"   "588"
						"linux"     "588"
						"mac"       "588"
					}

					"m_actualVel"  // Vector
					{
						"windows"   "596"
						"linux"     "596"
						"mac"       "596"
					}

					"m_moveGoal"  // Vector
					{
						"windows"   "608"
						"linux"     "608"
						"mac"       "608"
					}

					"m_knownGoodPos"  // Vector
					{
						"windows"   "620"
						"linux"     "620"
						"mac"       "620"
					}

					"m_hasKnownGoodPos"  // bool
					{
						"windows"   "632"
						"linux"     "632"
						"mac"       "632"
					}

					"m_priorKnownGoodPos"  // Vector
					{
						"windows"   "636"
						"linux"     "636"
						"mac"       "636"
					}

					"m_hasPriorKnownGoodPos"  // bool
					{
						"windows"   "648"
						"linux"     "648"
						"mac"       "648"
					}

					"m_priorKnownGoodPosTimer"  // CountdownTimer
					{
						"windows"   "652"
						"linux"     "652"
						"mac"       "652"
					}

					"m_collisionTimer"  // IntervalTimer
					{
						"windows"   "660"
						"linux"     "660"
						"mac"       "660"
					}

					"m_viewGoal"  // Vector
					{
						"windows"   "664"
						"linux"     "664"
						"mac"       "664"
					}

					"m_isLookingAt"  // bool
					{
						"windows"   "676"
						"linux"     "676"
						"mac"       "676"
					}

					"m_faceGoal"  // Vector
					{
						"windows"   "680"
						"linux"     "680"
						"mac"       "680"
					}

					"m_isFacingTo"  // bool
					{
						"windows"   "692"
						"linux"     "692"
						"mac"       "692"
					}

					"m_path"  // CNavPath
					{
						"windows"   "696"
						"linux"     "696"
						"mac"       "696"
					}

					"m_follower"  // CNavPathFollower
					{
						"windows"   "6844"
						"linux"     "6844"
						"mac"       "6844"
					}

					"m_lastPosition"  // Vector
					{
						"windows"   "6940"
						"linux"     "6940"
						"mac"       "6940"
					}

					"m_moveType"  // enum MoveType
					{
						"windows"   "6952"
						"linux"     "6952"
						"mac"       "6952"
					}

					"m_moveLimit"  // enum MoveType
					{
						"windows"   "6956"
						"linux"     "6956"
						"mac"       "6956"
					}

					"m_isCrouching"  // bool
					{
						"windows"   "6960"
						"linux"     "6960"
						"mac"       "6960"
					}

					"m_minCrouchTimer"  // CountdownTimer
					{
						"windows"   "6964"
						"linux"     "6964"
						"mac"       "6964"
					}

					"m_moveAngle"  // float
					{
						"windows"   "6972"
						"linux"     "6972"
						"mac"       "6972"
					}

					"m_wiggleDirection"  // enum NavRelativeDirType
					{
						"windows"   "6976"
						"linux"     "6976"
						"mac"       "6976"
					}

					"m_wiggleTimer"  // CountdownTimer
					{
						"windows"   "6980"
						"linux"     "6980"
						"mac"       "6980"
					}

					"m_wiggleJumpTimer"  // CountdownTimer
					{
						"windows"   "6988"
						"linux"     "6988"
						"mac"       "6988"
					}

					"m_inhibitObstacleAvoidance"  // CountdownTimer
					{
						"windows"   "6996"
						"linux"     "6996"
						"mac"       "6996"
					}

					"m_jumpTimer"  // CountdownTimer
					{
						"windows"   "7004"
						"linux"     "7004"
						"mac"       "7004"
					}

					"m_hasJumped"  // bool
					{
						"windows"   "7012"
						"linux"     "7012"
						"mac"       "7012"
					}

					"m_hasJumpedIntoAir"  // bool
					{
						"windows"   "7013"
						"linux"     "7013"
						"mac"       "7013"
					}

					"m_jumpTarget"  // Vector
					{
						"windows"   "7016"
						"linux"     "7016"
						"mac"       "7016"
					}

					"m_clearPathTimer"  // CountdownTimer
					{
						"windows"   "7028"
						"linux"     "7028"
						"mac"       "7028"
					}

					"m_traversingLadder"  // bool
					{
						"windows"   "7036"
						"linux"     "7036"
						"mac"       "7036"
					}

					"m_visiblePlayer"  // EHANDLE[32]
					{
						"windows"   "7040"
						"linux"     "7040"
						"mac"       "7040"
					}

					"m_visiblePlayerCount"  // int
					{
						"windows"   "7296"
						"linux"     "7296"
						"mac"       "7296"
					}

					"m_visionTimer"  // CountdownTimer
					{
						"windows"   "7300"
						"linux"     "7300"
						"mac"       "7300"
					}
				}
			}
		}
	}
}
