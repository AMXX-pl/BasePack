/**
 * Do not edit this file.  Any changes will be overwritten by the gamedata
 * updater or by upgrading your AMX Mod X install.
 *
 * To override data in this file, create a subdirectory named "custom" and
 * place your own gamedata file(s) inside of it.  Such files will be parsed
 * after AMXX's own.
 *
 * For more information, see http://wiki.alliedmods.net/Gamedata_Updating_(AMX_Mod_X)
 */

"Games"
{
	"#default"
	{
		"Classes"
		{
			"CGrenade"
			{
				"Offsets"
				{
					"m_bStartDefuse"  // bool
					{
						"type"      "boolean"

						"windows"   "384"
						"linux"     "404"
						"mac"       "404"
					}

					"m_bIsC4"  // bool
					{
						"type"      "boolean"

						"windows"   "385"
						"linux"     "405"
						"mac"       "405"
					}

					"m_pBombDefuser"  // EHANDLE
					{
						"type"      "ehandle"

						"windows"   "388"
						"linux"     "408"
						"mac"       "408"
					}

					"m_flDefuseCountDown"  // float
					{
						"type"      "float"

						"windows"   "396"
						"linux"     "416"
						"mac"       "416"
					}

					"m_flC4Blow"  // float
					{
						"type"      "float"

						"windows"   "400"
						"linux"     "420"
						"mac"       "420"
					}

					"m_flNextFreqInterval"  // float
					{
						"type"      "float"

						"windows"   "404"
						"linux"     "424"
						"mac"       "424"
					}

					"m_flNextBeep"  // float
					{
						"type"      "float"

						"windows"   "408"
						"linux"     "428"
						"mac"       "428"
					}

					"m_flNextFreq"  // float
					{
						"type"      "float"

						"windows"   "412"
						"linux"     "432"
						"mac"       "432"
					}

					"m_sBeepName"  // char*
					{
						"type"      "stringptr"

						"windows"   "416"
						"linux"     "436"
						"mac"       "436"
					}

					"m_fAttenu"  // float
					{
						"type"      "float"

						"windows"   "420"
						"linux"     "440"
						"mac"       "440"
					}

					"m_flNextBlink"  // float
					{
						"type"      "float"

						"windows"   "424"
						"linux"     "444"
						"mac"       "444"
					}

					"m_fNextDefuse"  // float
					{
						"type"      "float"

						"windows"   "428"
						"linux"     "448"
						"mac"       "448"
					}

					"m_bJustBlew"  // bool
					{
						"type"      "boolean"

						"windows"   "432"
						"linux"     "452"
						"mac"       "452"
					}

					"m_iTeam"  // int
					{
						"type"      "integer"

						"windows"   "436"
						"linux"     "456"
						"mac"       "456"
					}

					"m_iCurWave"  // int
					{
						"type"      "integer"

						"windows"   "440"
						"linux"     "460"
						"mac"       "460"
					}

					"m_pentCurBombTarget"  // edict_t*
					{
						"type"      "edict"

						"windows"   "444"
						"linux"     "464"
						"mac"       "464"
					}

					"m_SGSmoke"  // int
					{
						"type"      "integer"

						"windows"   "448"
						"linux"     "468"
						"mac"       "468"
					}

					"m_angle"  // int
					{
						"type"      "integer"

						"windows"   "452"
						"linux"     "472"
						"mac"       "472"
					}

					"m_usEvent"  // short unsigned int
					{
						"type"      "short"
						"unsigned"  "1"

						"windows"   "456"
						"linux"     "476"
						"mac"       "476"
					}

					"m_bLightSmoke"  // bool
					{
						"type"      "boolean"

						"windows"   "458"
						"linux"     "478"
						"mac"       "478"
					}

					"m_bDetonated"  // bool
					{
						"type"      "boolean"

						"windows"   "459"
						"linux"     "479"
						"mac"       "479"
					}

					"m_vSmokeDetonate"  // Vector
					{
						"type"      "vector"

						"windows"   "460"
						"linux"     "480"
						"mac"       "480"
					}

					"m_iBounceCount"  // int
					{
						"type"      "integer"

						"windows"   "472"
						"linux"     "492"
						"mac"       "492"
					}

					"m_fRegisteredSound"  // BOOL
					{
						"type"      "integer"

						"windows"   "476"
						"linux"     "496"
						"mac"       "496"
					}
				}
			}
		}
	}
}


/**
 * Class Hierarchy
 * -
 * CBaseEntity
 *     CBaseDelay
 *         CBaseAnimating
 *             CBaseToggle
 *                 CBaseMonster
 *                     CGrenade
 */
